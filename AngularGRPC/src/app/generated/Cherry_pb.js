// source: Cherry.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.DashboardReply', null, global);
goog.exportSymbol('proto.DashboardRequest', null, global);
goog.exportSymbol('proto.Product', null, global);
goog.exportSymbol('proto.ProductsReply', null, global);
goog.exportSymbol('proto.ProductsRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DashboardRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DashboardRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DashboardRequest.displayName = 'proto.DashboardRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DashboardReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DashboardReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DashboardReply.displayName = 'proto.DashboardReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProductsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProductsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProductsRequest.displayName = 'proto.ProductsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProductsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProductsReply.repeatedFields_, null);
};
goog.inherits(proto.ProductsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProductsReply.displayName = 'proto.ProductsReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Product = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Product, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Product.displayName = 'proto.Product';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DashboardRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DashboardRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DashboardRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DashboardRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DashboardRequest}
 */
proto.DashboardRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DashboardRequest;
  return proto.DashboardRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DashboardRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DashboardRequest}
 */
proto.DashboardRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DashboardRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DashboardRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DashboardRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DashboardRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DashboardReply.prototype.toObject = function(opt_includeInstance) {
  return proto.DashboardReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DashboardReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DashboardReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    projectsbookedvalue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nextdeliverydueinms: jspb.Message.getFieldWithDefault(msg, 2, 0),
    staffonsite: jspb.Message.getFieldWithDefault(msg, 3, 0),
    factoryuptimems: jspb.Message.getFieldWithDefault(msg, 4, 0),
    servicingtasksdue: jspb.Message.getFieldWithDefault(msg, 5, 0),
    machinesstopped: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DashboardReply}
 */
proto.DashboardReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DashboardReply;
  return proto.DashboardReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DashboardReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DashboardReply}
 */
proto.DashboardReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProjectsbookedvalue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextdeliverydueinms(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStaffonsite(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFactoryuptimems(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServicingtasksdue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMachinesstopped(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DashboardReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DashboardReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DashboardReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DashboardReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProjectsbookedvalue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNextdeliverydueinms();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getStaffonsite();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFactoryuptimems();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getServicingtasksdue();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getMachinesstopped();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional int32 projectsBookedValue = 1;
 * @return {number}
 */
proto.DashboardReply.prototype.getProjectsbookedvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DashboardReply} returns this
 */
proto.DashboardReply.prototype.setProjectsbookedvalue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 nextDeliveryDueInMs = 2;
 * @return {number}
 */
proto.DashboardReply.prototype.getNextdeliverydueinms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.DashboardReply} returns this
 */
proto.DashboardReply.prototype.setNextdeliverydueinms = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 staffOnSite = 3;
 * @return {number}
 */
proto.DashboardReply.prototype.getStaffonsite = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.DashboardReply} returns this
 */
proto.DashboardReply.prototype.setStaffonsite = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 factoryUptimeMs = 4;
 * @return {number}
 */
proto.DashboardReply.prototype.getFactoryuptimems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.DashboardReply} returns this
 */
proto.DashboardReply.prototype.setFactoryuptimems = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 servicingTasksDue = 5;
 * @return {number}
 */
proto.DashboardReply.prototype.getServicingtasksdue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.DashboardReply} returns this
 */
proto.DashboardReply.prototype.setServicingtasksdue = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 machinesStopped = 6;
 * @return {number}
 */
proto.DashboardReply.prototype.getMachinesstopped = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.DashboardReply} returns this
 */
proto.DashboardReply.prototype.setMachinesstopped = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProductsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ProductsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProductsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    modifiedsince: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxcount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProductsRequest}
 */
proto.ProductsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProductsRequest;
  return proto.ProductsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProductsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProductsRequest}
 */
proto.ProductsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setModifiedsince(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProductsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProductsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProductsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModifiedsince();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMaxcount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 modifiedSince = 1;
 * @return {number}
 */
proto.ProductsRequest.prototype.getModifiedsince = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProductsRequest} returns this
 */
proto.ProductsRequest.prototype.setModifiedsince = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 maxCount = 2;
 * @return {number}
 */
proto.ProductsRequest.prototype.getMaxcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProductsRequest} returns this
 */
proto.ProductsRequest.prototype.setMaxcount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProductsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProductsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.ProductsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProductsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    productsList: jspb.Message.toObjectList(msg.getProductsList(),
    proto.Product.toObject, includeInstance),
    modifiedcount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProductsReply}
 */
proto.ProductsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProductsReply;
  return proto.ProductsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProductsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProductsReply}
 */
proto.ProductsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Product;
      reader.readMessage(value,proto.Product.deserializeBinaryFromReader);
      msg.addProducts(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModifiedcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProductsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProductsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProductsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProductsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Product.serializeBinaryToWriter
    );
  }
  f = message.getModifiedcount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated Product products = 1;
 * @return {!Array<!proto.Product>}
 */
proto.ProductsReply.prototype.getProductsList = function() {
  return /** @type{!Array<!proto.Product>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Product, 1));
};


/**
 * @param {!Array<!proto.Product>} value
 * @return {!proto.ProductsReply} returns this
*/
proto.ProductsReply.prototype.setProductsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Product=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Product}
 */
proto.ProductsReply.prototype.addProducts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Product, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProductsReply} returns this
 */
proto.ProductsReply.prototype.clearProductsList = function() {
  return this.setProductsList([]);
};


/**
 * optional int32 modifiedCount = 2;
 * @return {number}
 */
proto.ProductsReply.prototype.getModifiedcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ProductsReply} returns this
 */
proto.ProductsReply.prototype.setModifiedcount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Product.prototype.toObject = function(opt_includeInstance) {
  return proto.Product.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Product} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Product.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    modifiedticks: jspb.Message.getFieldWithDefault(msg, 2, 0),
    category: jspb.Message.getFieldWithDefault(msg, 3, ""),
    subcategory: jspb.Message.getFieldWithDefault(msg, 4, ""),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    location: jspb.Message.getFieldWithDefault(msg, 6, ""),
    image: jspb.Message.getFieldWithDefault(msg, 7, ""),
    brand: jspb.Message.getFieldWithDefault(msg, 8, ""),
    targeturl: jspb.Message.getFieldWithDefault(msg, 9, ""),
    thumbnail: jspb.Message.getFieldWithDefault(msg, 10, ""),
    product: jspb.Message.getFieldWithDefault(msg, 11, ""),
    salepercentage: jspb.Message.getFieldWithDefault(msg, 12, ""),
    price: jspb.Message.getFieldWithDefault(msg, 13, ""),
    saleprice: jspb.Message.getFieldWithDefault(msg, 14, ""),
    shop: jspb.Message.getFieldWithDefault(msg, 15, ""),
    datecreated: jspb.Message.getFieldWithDefault(msg, 16, 0),
    dateupdated: jspb.Message.getFieldWithDefault(msg, 17, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Product}
 */
proto.Product.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Product;
  return proto.Product.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Product} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Product}
 */
proto.Product.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setModifiedticks(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubcategory(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrand(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargeturl(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumbnail(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setProduct(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSalepercentage(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setSaleprice(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setShop(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDatecreated(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDateupdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Product.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Product.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Product} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Product.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getModifiedticks();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getCategory();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSubcategory();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getImage();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBrand();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTargeturl();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getThumbnail();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getProduct();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSalepercentage();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getSaleprice();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getShop();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getDatecreated();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getDateupdated();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Product.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 modifiedTicks = 2;
 * @return {number}
 */
proto.Product.prototype.getModifiedticks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setModifiedticks = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string category = 3;
 * @return {string}
 */
proto.Product.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setCategory = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string subcategory = 4;
 * @return {string}
 */
proto.Product.prototype.getSubcategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setSubcategory = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.Product.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string location = 6;
 * @return {string}
 */
proto.Product.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setLocation = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string image = 7;
 * @return {string}
 */
proto.Product.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setImage = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string brand = 8;
 * @return {string}
 */
proto.Product.prototype.getBrand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setBrand = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string targetUrl = 9;
 * @return {string}
 */
proto.Product.prototype.getTargeturl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setTargeturl = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string thumbnail = 10;
 * @return {string}
 */
proto.Product.prototype.getThumbnail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setThumbnail = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string product = 11;
 * @return {string}
 */
proto.Product.prototype.getProduct = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setProduct = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string salePercentage = 12;
 * @return {string}
 */
proto.Product.prototype.getSalepercentage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setSalepercentage = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string price = 13;
 * @return {string}
 */
proto.Product.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string salePrice = 14;
 * @return {string}
 */
proto.Product.prototype.getSaleprice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setSaleprice = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string shop = 15;
 * @return {string}
 */
proto.Product.prototype.getShop = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setShop = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional int64 dateCreated = 16;
 * @return {number}
 */
proto.Product.prototype.getDatecreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setDatecreated = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int64 dateUpdated = 17;
 * @return {number}
 */
proto.Product.prototype.getDateupdated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.Product} returns this
 */
proto.Product.prototype.setDateupdated = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


goog.object.extend(exports, proto);
